<?php

declare(strict_types=1);

namespace Mezzio\Tooling\Factory;

use function dirname;
use function file_exists;
use function file_put_contents;
use function implode;
use function is_writable;
use function ksort;
use function rtrim;
use function sprintf;
use function str_repeat;

use const SORT_NATURAL;

/**
 * Inject factory configuration in an autoloadable location.
 *
 * This class will re-generate the file denoted by its CONFIG_FILE constant.
 * It first pulls in the data in that file, if the file exists, and then adds
 * an entry for the given class, pointing it to the given factory, rewriting
 * the configuration file on completion.
 */
final class ConfigInjector
{
    /**
     * @var string
     */
    public const CONFIG_FILE = 'config/autoload/mezzio-tooling-factories.global.php';

    /**
     * @var string
     */
    public const TEMPLATE = <<<'EOT'
        <?php
        
        /**
         * This file generated by %1$s.
         *
         * Modifications should be kept at a minimum, and restricted to adding or
         * removing factory definitions; other dependency types may be overwritten
         * when regenerating this file via mezzio-tooling commands.
         */
         
        declare(strict_types=1);
        
        return [
            'dependencies' => [
                'factories' => [
        %2$s,
                ],
            ],
        ];
        
        EOT;

    private string $configFile;

    public function __construct(string $projectRoot)
    {
        $this->configFile = $projectRoot === ''
            ? self::CONFIG_FILE
            : sprintf('%s/%s', rtrim($projectRoot, '/'), self::CONFIG_FILE);
    }

    public function injectFactoryForClass(string $factory, string $class): string
    {
        if (! $this->configIsWritable()) {
            throw ConfigFileNotWritableException::forFile($this->configFile);
        }

        $config         = file_exists($this->configFile) ? include $this->configFile : [];
        $config         = $config['dependencies']['factories'] ?? [];
        $config[$class] = $factory;
        $configContents = sprintf(
            self::TEMPLATE,
            self::class,
            $this->normalizeConfig($config)
        );
        file_put_contents($this->configFile, $configContents);

        return $this->configFile;
    }

    private function configIsWritable(): bool
    {
        return is_writable($this->configFile)
            || (! file_exists($this->configFile) && is_writable(dirname($this->configFile)));
    }

    private function normalizeConfig(array $config): string
    {
        $normalized = [];
        ksort($config, SORT_NATURAL);
        foreach ($config as $class => $factory) {
            $class   .= '::class';
            $factory .= '::class';

            $normalized[] = sprintf('%s%s => %s', str_repeat(' ', 12), $class, $factory);
        }

        return implode(",\n", $normalized);
    }
}
